# Test generated by RoostGPT for test nobelmaster-data using AI Type Open AI and AI Model gpt-4

# RoostTestHash=a7e3d97608

config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 20
  plugins:
    expect: {}
  payload:
    path: "nobelPrizes_get.csv"
    fields: ["offset", "limit", "sort", "nobelPrizeYear", "yearTo", "nobelPrizeCategory", "format", "csvLang"]
    skipHeader: true

scenarios:
  - name: "Successful API request"
    flow:
      - get:
          url: "/nobelPrizes"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          qs:
            offset: "{{ offset }}"
            limit: "{{ limit }}"
            sort: "{{ sort }}"
            nobelPrizeYear: "{{ nobelPrizeYear }}"
            yearTo: "{{ yearTo }}"
            nobelPrizeCategory: "{{ nobelPrizeCategory }}"
            format: "{{ format }}"
            csvLang: "{{ csvLang }}"
          expect:
            - statusCode: 200
            - hasProperty: "nobelPrizes"
            - hasProperty: "meta"
            - hasProperty: "links"

  - name: "API request with validation failure"
    flow:
      - get:
          url: "/invalidURL"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 400
            - hasProperty: "code"
            - hasProperty: "message"

  - name: "API request with edge case"
    flow:
      - get:
          url: "/nobelPrizes"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          qs:
            offset: "99999999999999999999"
            limit: "99999999999999999999"
            sort: "asc"
            nobelPrizeYear: "99999999999999999999"
            yearTo: "99999999999999999999"
            nobelPrizeCategory: "che"
            format: "json"
            csvLang: "en"
          expect:
            - statusCode: 422
            - hasProperty: "code"
            - hasProperty: "message"
