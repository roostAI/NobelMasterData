# Test generated by RoostGPT for test nobelmaster-data using AI Type Open AI and AI Model gpt-4

# RoostTestHash=1548dfd811

config:
  target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payload:
    path: "nobelPrizes_get.csv"
    fields:
      - "offset"
      - "limit"
      - "sort"
      - "nobelPrizeYear"
      - "yearTo"
      - "nobelPrizeCategory"
      - "format"
      - "csvLang"
    skipHeader: true

scenarios:
  - name: "Successful API request"
    flow:
      - get:
          url: "/nobelPrizes"
          qs:
            offset: "{{ offset }}"
            limit: "{{ limit }}"
            sort: "{{ sort }}"
            nobelPrizeYear: "{{ nobelPrizeYear }}"
            yearTo: "{{ yearTo }}"
            nobelPrizeCategory: "{{ nobelPrizeCategory }}"
            format: "{{ format }}"
            csvLang: "{{ csvLang }}"
          expect:
            - statusCode: 200
            - hasProperty: "nobelPrizes"
            - hasProperty: "meta"
            - hasProperty: "links"

  - name: "API request with validation failure"
    flow:
      - get:
          url: "/invalidURL"
          expect:
            - statusCode: 400

  - name: "API request with edge case"
    flow:
      - get:
          url: "/nobelPrizes"
          qs:
            offset: "1"
            limit: "50characterslongvaluebeyondexpectationlimit"
            sort: "asc"
            nobelPrizeYear: "1901"
            yearTo: "2022"
            nobelPrizeCategory: "che"
            format: "json"
            csvLang: "en"
          expect:
            - statusCode: 200
            - hasProperty: "nobelPrizes"
            - hasProperty: "meta"
            - hasProperty: "links"

  - name: "API request with 404 status code"
    flow:
      - get:
          url: "/nonexistentURL"
          expect:
            - statusCode: 404

  - name: "API request with invalid payload"
    flow:
      - get:
          url: "/nobelPrizes"
          qs:
            offset: "string_instead_of_integer"
            limit: "another_string"
            sort: "invalid_sort_option"
            nobelPrizeYear: "string_instead_of_integer"
            yearTo: "yet_another_string"
            nobelPrizeCategory: "invalid_category"
            format: "invalid_format"
            csvLang: "invalid_language"
          expect:
            - statusCode: 400
